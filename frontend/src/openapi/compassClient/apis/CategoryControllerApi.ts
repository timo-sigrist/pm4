/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryDto,
} from '../models/index';
import {
    CategoryDtoFromJSON,
    CategoryDtoToJSON,
} from '../models/index';

export interface CreateCategoryRequest {
    categoryDto: CategoryDto;
}

export interface GetCategoryListByUserIdRequest {
    userId: string;
}

export interface LinkUsersToExistingCategoryRequest {
    categoryDto: CategoryDto;
}

/**
 * 
 */
export class CategoryControllerApi extends runtime.BaseAPI {

    /**
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>> {
        if (requestParameters['categoryDto'] == null) {
            throw new runtime.RequiredError(
                'categoryDto',
                'Required parameter "categoryDto" was null or undefined when calling createCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryDtoToJSON(requestParameters['categoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDtoFromJSON(jsonValue));
    }

    /**
     */
    async createCategory(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto> {
        const response = await this.createCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryDtoFromJSON));
    }

    /**
     */
    async getAllCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryDto>> {
        const response = await this.getAllCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCategoryListByUserIdRaw(requestParameters: GetCategoryListByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getCategoryListByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/category/getCategoryListByUserId/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryDtoFromJSON));
    }

    /**
     */
    async getCategoryListByUserId(requestParameters: GetCategoryListByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryDto>> {
        const response = await this.getCategoryListByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkUsersToExistingCategoryRaw(requestParameters: LinkUsersToExistingCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryDto>> {
        if (requestParameters['categoryDto'] == null) {
            throw new runtime.RequiredError(
                'categoryDto',
                'Required parameter "categoryDto" was null or undefined when calling linkUsersToExistingCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/category/linkUsersToExistingCategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryDtoToJSON(requestParameters['categoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDtoFromJSON(jsonValue));
    }

    /**
     */
    async linkUsersToExistingCategory(requestParameters: LinkUsersToExistingCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryDto> {
        const response = await this.linkUsersToExistingCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
