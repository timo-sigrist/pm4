/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IncidentDto,
} from '../models/index';
import {
    IncidentDtoFromJSON,
    IncidentDtoToJSON,
} from '../models/index';

export interface CreateIncidentRequest {
    incidentDto: IncidentDto;
}

export interface DeleteIncidentRequest {
    id: number;
}

export interface UpdateIncidentRequest {
    incidentDto: IncidentDto;
}

/**
 * 
 */
export class IncidentControllerApi extends runtime.BaseAPI {

    /**
     */
    async createIncidentRaw(requestParameters: CreateIncidentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncidentDto>> {
        if (requestParameters['incidentDto'] == null) {
            throw new runtime.RequiredError(
                'incidentDto',
                'Required parameter "incidentDto" was null or undefined when calling createIncident().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/incident`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncidentDtoToJSON(requestParameters['incidentDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncidentDtoFromJSON(jsonValue));
    }

    /**
     */
    async createIncident(requestParameters: CreateIncidentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncidentDto> {
        const response = await this.createIncidentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteIncidentRaw(requestParameters: DeleteIncidentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteIncident().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incident/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteIncident(requestParameters: DeleteIncidentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteIncidentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllIncidentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IncidentDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incident/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncidentDtoFromJSON));
    }

    /**
     */
    async getAllIncidents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IncidentDto>> {
        const response = await this.getAllIncidentsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateIncidentRaw(requestParameters: UpdateIncidentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncidentDto>> {
        if (requestParameters['incidentDto'] == null) {
            throw new runtime.RequiredError(
                'incidentDto',
                'Required parameter "incidentDto" was null or undefined when calling updateIncident().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/incident`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IncidentDtoToJSON(requestParameters['incidentDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncidentDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateIncident(requestParameters: UpdateIncidentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncidentDto> {
        const response = await this.updateIncidentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
