/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TimestampDto,
} from '../models/index';
import {
    TimestampDtoFromJSON,
    TimestampDtoToJSON,
} from '../models/index';

export interface CreateTimestampRequest {
    timestampDto: TimestampDto;
}

export interface DeleteTimestampRequest {
    id: number;
}

export interface GetAllTimestampByDaySheetIdRequest {
    id: number;
}

export interface GetTimestampByIdRequest {
    id: number;
}

export interface PutTimestampRequest {
    timestampDto: TimestampDto;
}

/**
 * 
 */
export class TimestampControllerApi extends runtime.BaseAPI {

    /**
     */
    async createTimestampRaw(requestParameters: CreateTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimestampDto>> {
        if (requestParameters['timestampDto'] == null) {
            throw new runtime.RequiredError(
                'timestampDto',
                'Required parameter "timestampDto" was null or undefined when calling createTimestamp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timestamp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimestampDtoToJSON(requestParameters['timestampDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimestampDtoFromJSON(jsonValue));
    }

    /**
     */
    async createTimestamp(requestParameters: CreateTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimestampDto> {
        const response = await this.createTimestampRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTimestampRaw(requestParameters: DeleteTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTimestamp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timestamp/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteTimestamp(requestParameters: DeleteTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteTimestampRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllTimestampByDaySheetIdRaw(requestParameters: GetAllTimestampByDaySheetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimestampDto>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAllTimestampByDaySheetId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timestamp/allbydaysheetid/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimestampDtoFromJSON));
    }

    /**
     */
    async getAllTimestampByDaySheetId(requestParameters: GetAllTimestampByDaySheetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimestampDto>> {
        const response = await this.getAllTimestampByDaySheetIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTimestampByIdRaw(requestParameters: GetTimestampByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimestampDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTimestampById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timestamp/getById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimestampDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTimestampById(requestParameters: GetTimestampByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimestampDto> {
        const response = await this.getTimestampByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putTimestampRaw(requestParameters: PutTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimestampDto>> {
        if (requestParameters['timestampDto'] == null) {
            throw new runtime.RequiredError(
                'timestampDto',
                'Required parameter "timestampDto" was null or undefined when calling putTimestamp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timestamp`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimestampDtoToJSON(requestParameters['timestampDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimestampDtoFromJSON(jsonValue));
    }

    /**
     */
    async putTimestamp(requestParameters: PutTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimestampDto> {
        const response = await this.putTimestampRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
